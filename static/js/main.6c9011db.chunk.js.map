{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","scrollAmount","slide","side","scrollLength","props","step","itemWidth","fieldLength","images","length","lastFrame","frameSize","setState","prevState","this","animationDuration","infinite","fieldWidth","maxScroll","className","type","onClick","disabled","style","width","height","left","transition","map","image","i","src","alt","Component","App","changeFrameSize","event","target","value","changeFrameStep","changeItemWidth","changeAnimationDuration","changeInfinite","blockInput","preventDefault","min","max","onChange","onKeyDown","checked","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c9011db.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\ntype State = {\n  scrollAmount: number,\n};\n\nexport class Carousel extends Component<Props, State> {\n  state = {\n    scrollAmount: 0,\n  };\n\n  slide = (side: string) => {\n    let scrollLength = this.props.step * this.props.itemWidth;\n    const fieldLength = this.props.itemWidth * this.props.images.length;\n    const lastFrame = this.props.frameSize * this.props.itemWidth;\n\n    this.setState((prevState) => {\n      if (prevState.scrollAmount + lastFrame >= fieldLength && side === 'r') {\n        return { scrollAmount: 0 };\n      }\n\n      if (prevState.scrollAmount + scrollLength >= fieldLength - lastFrame\n        && side === 'r') {\n        scrollLength = fieldLength - prevState.scrollAmount - lastFrame\n          || this.props.itemWidth;\n      }\n\n      if (prevState.scrollAmount <= 0 && side === 'l') {\n        return { scrollAmount: fieldLength - lastFrame };\n      }\n\n      if (prevState.scrollAmount - scrollLength < 0 && side === 'l') {\n        scrollLength = prevState.scrollAmount;\n      }\n\n      return side === 'r'\n        ? { scrollAmount: prevState.scrollAmount + scrollLength }\n        : { scrollAmount: prevState.scrollAmount - scrollLength };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n    const { scrollAmount } = this.state;\n    const fieldWidth = frameSize * itemWidth;\n    const maxScroll = itemWidth * images.length;\n\n    return (\n      <div className=\"wrapper\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            this.slide('l');\n          }}\n          disabled={!infinite\n            && scrollAmount === 0}\n        >\n          Prev\n        </button>\n        <div\n          className=\"carousel\"\n          style={{\n            width: `${fieldWidth}px`,\n            height: `${itemWidth}px`,\n          }}\n        >\n          <ul\n            className=\"carousel__list\"\n            style={{\n              left: `-${scrollAmount}px`,\n              transition: `${animationDuration}ms`,\n            }}\n          >\n            {images.map((image, i) => (\n              <li\n                key={image}\n              >\n                <img\n                  src={image}\n                  alt={`pic #${i}`}\n                  style={{\n                    width: `${itemWidth}px`,\n                  }}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <button\n          type=\"button\"\n          className=\"button\"\n          data-cy=\"next\"\n          onClick={() => {\n            this.slide('r');\n          }}\n          disabled={!infinite\n            && scrollAmount === maxScroll - fieldWidth}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  changeFrameSize = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      frameSize: +event.target.value,\n    });\n  };\n\n  changeFrameStep = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      step: +event.target.value,\n    });\n  };\n\n  changeItemWidth = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      itemWidth: +event.target.value,\n    });\n  };\n\n  changeAnimationDuration = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      animationDuration: +event.target.value,\n    });\n  };\n\n  changeInfinite = () => {\n    this.setState((prevState) => (\n      { infinite: !prevState.infinite }\n    ));\n  };\n\n  blockInput = (event: KeyboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <>\n        <div className=\"App\">\n          <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n          <Carousel\n            images={images}\n            step={step}\n            frameSize={frameSize}\n            itemWidth={itemWidth}\n            animationDuration={animationDuration}\n            infinite={infinite}\n          />\n        </div>\n\n        <div className=\"settings\">\n          <h3>Carousel settings:</h3>\n          <label>\n            Item Width:\n            <input\n              type=\"number\"\n              min=\"1\"\n              max={`${images.length}`}\n              value={frameSize}\n              onChange={this.changeFrameSize}\n              onKeyDown={this.blockInput}\n            />\n          </label>\n\n          <label>\n            Scrolling step:\n            <input\n              type=\"number\"\n              min=\"1\"\n              max={`${images.length}`}\n              value={step}\n              onChange={this.changeFrameStep}\n              onKeyDown={this.blockInput}\n            />\n          </label>\n\n          <label>\n            Item width:\n            <input\n              type=\"number\"\n              min=\"50\"\n              max=\"250\"\n              step=\"10\"\n              value={itemWidth}\n              onChange={this.changeItemWidth}\n              onKeyDown={this.blockInput}\n            />\n          </label>\n\n          <label>\n            Animation duration(ms):\n            <input\n              type=\"number\"\n              min=\"0\"\n              max=\"5000\"\n              step=\"500\"\n              value={animationDuration}\n              onChange={this.changeAnimationDuration}\n              onKeyDown={this.blockInput}\n            />\n          </label>\n\n          <label>\n            Infinite scroll:\n            <input\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={this.changeInfinite}\n            />\n          </label>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}